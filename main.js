class MainScene extends Phaser.Scene {
  preload() {
    this.load.image('character', 'assets/images/character.png');
  }

  create() {
    const door = this.add.rectangle(0, 35, 160, 95, 0x805500); //Âú∞Èù¢„ÇíÁîüÊàê
    const ground = this.add.rectangle(400, 580, 800, 115, 0x805500); //Âú∞Èù¢„ÇíÁîüÊàê
    this.physics.add.existing(ground, true); // Âú∞Èù¢„Å´physicsÂà§ÂÆö„Çí‰ªò„Åë„Çã
    this.goal = this.add.rectangle(750, 483, 60, 80, 0xffffff); //Âá∫Âè£„ÇíÁîüÊàê
    this.physics.add.existing(this.goal, true); // ‚Üê ËøΩÂä†ÔºöÈùôÁöÑ„Å™Áâ©ÁêÜ„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å´
    this.stairs = this.physics.add.staticGroup();
    this.characters = this.physics.add.group();

    // „Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÂÆöÊúüÁöÑ„Å´ÁîüÊàê
    this.time.addEvent({
      delay: 1000,
      callback: () => {
        this.spawnCharacter(); // „Ç≠„É£„É©„ÇíÁîüÊàê„Åô„Çã
      },
      repeat: 49
    });

    // „Ç≠„É£„É©„Å®Âú∞Èù¢„ÅÆË°ùÁ™ÅË®≠ÂÆöÔºà„Åì„Åì„Åß1Âõû„Å†„ÅëÔºâ
    this.physics.add.collider(this.characters, ground);
    // „Ç≠„É£„É©„Å®ÈöéÊÆµ„ÅÆË°ùÁ™ÅË®≠ÂÆöÔºà„Åì„Åì„Åß1Âõû„Å†„ÅëÔºâ
    this.physics.add.collider(this.characters, this.stairs);

    // „Éà„É©„ÉÉ„Éó„ÅÆ„Ç∞„É´„Éº„Éó
    this.traps = this.physics.add.staticGroup();

    // „Éà„É©„ÉÉ„Éó„ÇíÁîªÈù¢‰∏≠Â§Æ„Å´Ë®≠ÁΩÆÔºàË§áÊï∞„Åß„ÇÇÂèØÔºâ
    const trap = this.add.rectangle(400, 520, 60, 10, 0xff0000); // ÂπÖ60„ÅÆËµ§„ÅÑ„Éà„É©„ÉÉ„Éó
    this.physics.add.existing(trap, true);
    this.traps.add(trap);

    // „Ç≠„É£„É©„Åå„Éà„É©„ÉÉ„Éó„Å´Ëß¶„Çå„Åü„ÇâÊ∂àÊªÖ
    this.physics.add.overlap(this.characters, this.traps, (character) => {
      character.destroy();
    });

    // „Ç¥„Éº„É´„ÅÆ‰∏ä„Å´„Ç´„Ç¶„É≥„Çø„Éº„ÇíË°®Á§∫„Åô„Çã
    this.goalCount = 0;

    this.goalCounterText = this.add.text(this.goal.x, this.goal.y - 80, '0', {
      fontSize: '40px',
      color: '#ffffff',
      backgroundColor: '#000000',
      padding: { x: 6, y: 3 }
    });
    this.goalCounterText.setOrigin(0.5);

    // „Ç≠„É£„É©„Åå„Ç¥„Éº„É´„Å´Ëß¶„Çå„Åü„ÇâÊ∂àÊªÖ
    this.physics.add.overlap(this.characters, this.goal, (obj1, obj2) => {
      let char = null;
    
      if (this.characters.contains(obj1)) {
        char = obj1;
      } else if (this.characters.contains(obj2)) {
        char = obj2;
      }
    
      if (char) {
        //„Ç≠„É£„É©„Åå„Ç¥„Éº„É´„Å´Ëß¶„Çå„Åü„Çâ„Ç´„Ç¶„É≥„Éà
        this.goalCount++;
        this.goalCounterText.setText(this.goalCount.toString());
    
        if (char.countdownText) {
          char.countdownText.destroy();
        }
    
        char.destroy();
      }
    });    

    // ÂΩπÂâ≤„ÅÆÈÅ∏Êäû„Éú„Çø„É≥„ÇíÁîüÊàê
    // Áä∂ÊÖãÁÆ°ÁêÜ
    this.buildMode = false;
    this.explodeMode = false;

    // ÁàÜÁ†¥„É¢„Éº„Éâ„Éú„Çø„É≥
    this.explodeButton = this.add.text(420, 20, 'üí£ „Å∞„Åè„ÅØ„Å§', {
      fontSize: '30px',
      backgroundColor: '#ff4444',
      padding: { x: 15, y: 15 }
    })
    .setInteractive()
    .on('pointerdown', () => {
      this.explodeMode = !this.explodeMode;
      this.buildMode = false; // Âª∫Ë®≠„É¢„Éº„Éâ„ÅØËß£Èô§
      this.updateModeButtons();
    });

    // Âª∫Ë®≠„É¢„Éº„Éâ„Éú„Çø„É≥
    this.buildButton = this.add.text(650, 20, 'ü™ú „Åã„ÅÑ„Å†„Çì', {
      fontSize: '30px',
      backgroundColor: '#8888ff',
      padding: { x: 15, y: 15 }
    })
    .setInteractive()
    .on('pointerdown', () => {
      this.buildMode = !this.buildMode;
      this.explodeMode = false; // ÁàÜÁ†¥„É¢„Éº„Éâ„ÅØËß£Èô§
      this.updateModeButtons();
    });

    // „Éú„Çø„É≥„ÅÆË¶ã„ÅüÁõÆÊõ¥Êñ∞Èñ¢Êï∞ÔºàËâ≤Ôºâ
    this.updateModeButtons = () => {
      this.explodeButton.setBackgroundColor(this.explodeMode ? '#aa0000' : '#ff4444');
      this.buildButton.setBackgroundColor(this.buildMode ? '#3333aa' : '#8888ff');
    };    

  }

  spawnCharacter() {
    const char = this.physics.add.sprite(100, 50, 'character');
    char.setScale(0.2);
    char.setTint(0x00ff00); // ÊúÄÂàù„ÅØÁ∑ëÔºàÈùû„Éì„É´„ÉÄ„ÉºÔºâ
    char.speed = 0.5;
    char.direction = 1;
    char.isBuilder = false;
    char.name = `char_${this.characters.getLength()}`;

    char.setInteractive();
    char.on('pointerdown', () => {
      if (this.explodeMode) {
        // „Åô„Åß„Å´„Ç´„Ç¶„É≥„Éà„ÅåÂßã„Åæ„Å£„Å¶„Åü„ÇâÁÑ°Ë¶ñ
        if (char.isExploding) return;
      
        char.isExploding = true;
      
        // „Ç´„Ç¶„É≥„Éà„ÉÄ„Ç¶„É≥Ë°®Á§∫„Çí‰ΩúÊàêÔºà„Ç≠„É£„É©„ÅÆ‰∏äÔºâ
        const countdownText = this.add.text(char.x, char.y - 30, '3', {
          fontSize: '20px',
          color: '#ff0000',
          backgroundColor: '#000000',
          padding: { x: 4, y: 2 }
        });
        countdownText.setOrigin(0.5);
      
        char.countdownText = countdownText;
      
        // „Ç´„Ç¶„É≥„Éà„Çí1Áßí„Åî„Å®„Å´Êõ¥Êñ∞
        let secondsLeft = 3;
        const timer = this.time.addEvent({
          delay: 1000,
          repeat: 2, // 2ÂõûÊõ¥Êñ∞„Åô„Çå„Å∞ 3‚Üí2‚Üí1
          callback: () => {
            secondsLeft--;
            countdownText.setText(secondsLeft.toString());
          }
        });
      
        // 3ÁßíÂæå„Å´ÁàÜÁ†¥
        this.time.delayedCall(3000, () => {
          countdownText.destroy(); // „ÉÜ„Ç≠„Çπ„ÉàÂâäÈô§
          this.explodeCharacter(char); // ÁàÜÁ†¥
        });
      
        // „É¢„Éº„ÉâOFFÔºà‰ªªÊÑèÔºö1‰ΩìÈôêÂÆö„Å™„ÇâÔºâ
        this.explodeMode = true;
      } else if (this.buildMode && !char.isBuilder) {
        char.isBuilder = true;
        char.setTint(0x00ffff); // Ê∞¥Ëâ≤„Åß„Éì„É´„ÉÄ„Éº
        char.lastStairTime = 0;
        char.speed = 0.15;
        console.log(`${char.name} ‚Üí „Éì„É´„ÉÄ„Éº„Å´Â§âÊõ¥`);
      }
    });

    this.characters.add(char);
  }

  update() {
    this.characters.getChildren().forEach((char) => {
      if (!char.active) return; // Skip destroyed characters

      char.setVelocityX(char.speed * char.direction * 100);

      // ÈöéÊÆµ„Çí‰Ωú„ÇãÂá¶ÁêÜÔºà„Éì„É´„ÉÄ„Éº„ÅÆ„ÅøÔºâ
      if (char.isBuilder) {
        const now = this.time.now;
        if (now - char.lastStairTime > 300) { // 0.3Áßí„Åî„Å®„Å´ÈöéÊÆµ„Çí‰Ωú„Çã
          const stairX = char.x + (char.direction > 0 ? 10 : -10);
          const stairY = char.y + 24;

          const stair = this.add.rectangle(stairX, stairY, 20, 5, 0x964B00); // Ëå∂Ëâ≤„ÅÆÈöéÊÆµ
          this.physics.add.existing(stair, true); // ‚Üê „Åì„Çå„ÇíËøΩÂä†ÔºàÈùôÁöÑ„Ç™„Éñ„Ç∏„Çß„ÇØ„ÉàÔºâ
          this.stairs.add(stair);

          // „Éì„É´„ÉÄ„Éº„ÇíÂ∞ë„Åó‰∏ä„Å´ÁßªÂãï„Åó„Å¶ÈöéÊÆµ„ÇíÁôª„Çã„Çà„ÅÜ„Å´Ë¶ã„Åõ„Çã
          char.y -= 4;

          char.lastStairTime = now;
        }
      } else {
        // „Éì„É´„ÉÄ„Éº„ÇíÂ∞ë„Åó‰∏ä„Å´ÁßªÂãï„Åó„Å¶ÈöéÊÆµ„ÇíÁôª„Çã„Çà„ÅÜ„Å´Ë¶ã„Åõ„Çã
        char.y -= 2.6;
      }

      // „Ç≠„É£„É©„ÅåÈöéÊÆµ„ÅÆ‰∏ä„Å´„ÅÑ„Çå„Å∞„ÄÅËêΩ‰∏ã„Åó„Å™„ÅÑ
      let onStair = false;
      this.stairs.getChildren().forEach((stair) => {
        const dx = Math.abs(char.x - stair.x);
        const dy = Math.abs(char.y - stair.y);
        if (dx < 15 && dy < 20) {
          onStair = true;
        }
      });

      if (!onStair && char.y < 500) {
        char.y += 2; // ËêΩ‰∏ã
      }

      // ÁîªÈù¢Á´Ø„ÅßË∑≥„Å≠Ëøî„Çã
      if (char.x >= this.game.config.width - 10) {
        char.direction = -1;
        char.flipX = true; // Â∑¶Âêë„Åç
      } else if (char.x <= 10) {
        char.direction = 1;
        char.flipX = false; // Âè≥Âêë„Åç
      }
      
      // ÁàÜÁô∫„Ç´„Ç¶„É≥„Çø„Éº„ÅåËøΩÂæì„Åô„Çã
      if (char.countdownText) {
        char.countdownText.setPosition(char.x, char.y - 30);
      }

    });
  }

  //„Ç≠„É£„É©„ÇØ„Çø„Éº„ÇíÁàÜÁ†¥„Åó„Å¶„ÄÅËøë„Åè„ÅÆÈöéÊÆµ„Å´Á©¥„Çí„ÅÇ„Åë„ÇãÂá¶ÁêÜ
  explodeCharacter(char) {
    if (!char.active) return; // Êó¢„Å´Ê∂à„Åà„Å¶„ÅÑ„Åü„ÇâÁÑ°Ë¶ñ
  
    // Ëøë„Åè„ÅÆÈöéÊÆµ„ÇíÂâäÈô§Ôºà10px‰ª•ÂÜÖ„Å™„Å©Ôºâ
    this.stairs.getChildren().forEach((stair) => {
      const dx = Math.abs(char.x - stair.x);
      const dy = Math.abs(char.y - stair.y);
      if (dx < 120 && dy < 120) {
        stair.destroy();
      }
    });
  
    // „Ç≠„É£„É©„ÇíÂâäÈô§ÔºàÁàÜÁ†¥Ôºâ
    char.destroy();
  
    // ÁàÜÁô∫„Ç®„Éï„Çß„ÇØ„ÉàÔºàÁ∞°ÊòìÔºâ
    const boom = this.add.text(char.x, char.y, 'üí•', { fontSize: '40px' });
    this.time.delayedCall(500, () => boom.destroy());
  }
  

}  

const config = {
  type: Phaser.AUTO,
  width: 900,
  height: 600,
  backgroundColor: '#89BDDE',
  scene: MainScene,
  physics: {
    default: 'arcade',
    arcade: {
      gravity: { y: 500 },
      debug: true
    }
  },
};

new Phaser.Game(config);
